receivers:
  # Data sources: traces, metrics, logs
  otlp:
    protocols:
      grpc:

  # Data sources: metrics
  prometheus:
    config:
      scrape_configs:
        - job_name: otel-collector
          scrape_interval: 5s
          metrics_path: '/actuator/prometheus'
          static_configs:
            - targets: [ "${env:METRICS_HOST}:${env:METRICS_PORT}" ]

processors:
  # batch metrics before sending to reduce API usage
  batch:
    timeout: 10s

exporters:
  logging:
    loglevel: debug

  otlp:
    endpoint: "${env:TEMPO_HOST}:${env:TEMPO_PORT}"
    tls:
      insecure: true

  loki:
    endpoint: "http://loki:3100/loki/api/v1/push"
    tls:
      insecure: true

  prometheus:
    endpoint: ":${env:PROMETHEUS_PORT}"

extensions:
  # responsible for responding to health check calls on behalf of the collector.
  health_check:
  # fetches the collectorâ€™s performance data
  pprof:
  # serves as an http endpoint that provides live debugging data about instrumented components.
  zpages:

service:
  extensions: [health_check, pprof, zpages]
  pipelines:
    traces:
      receivers: [otlp]
      processors: [batch]
      exporters: [otlp]
    metrics:
      receivers: [otlp]
      processors: [batch]
      exporters: [prometheus]
    logs:
      receivers: [otlp]
      processors: [batch]
      exporters: [ loki]